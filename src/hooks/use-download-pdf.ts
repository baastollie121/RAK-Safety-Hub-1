
'use client';

import { useState, RefObject } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { useToast } from '@/hooks/use-toast';
import { format } from 'date-fns';

interface PdfOptions {
  companyName: string;
  documentTitle: string;
  logoUrl?: string;
}

interface UseDownloadPdfProps {
  reportRef: RefObject<HTMLDivElement>;
  fileName: string;
  options: PdfOptions;
}

export function useDownloadPdf({ reportRef, fileName, options }: UseDownloadPdfProps) {
  const [isDownloading, setIsDownloading] = useState(false);
  const { toast } = useToast();

  const handleDownload = async () => {
    const element = reportRef.current;
    if (!element) {
      toast({ variant: 'destructive', title: 'Error', description: 'Could not find the content to download.' });
      return;
    }

    setIsDownloading(true);
    try {
      const canvas = await html2canvas(element, { scale: 2, useCORS: true, backgroundColor: null });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });
      const PADDING = 15;
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const contentWidth = pdfWidth - (PADDING * 2);

      const addHeaderAndFooter = (pageNumber: number) => {
          pdf.setFontSize(8);
          pdf.setTextColor(150);
          pdf.text(`Page ${pageNumber}`, pdfWidth / 2, pdfHeight - 10, { align: 'center' });
          pdf.text('Generated by RAK Safety Hub', PADDING, pdfHeight - 10);
          pdf.text(format(new Date(), 'PPP'), pdfWidth - PADDING, pdfHeight - 10, { align: 'right' });
      };

      const addPageContent = (pageNumber: number, position: number) => {
        if (pageNumber > 1) pdf.addPage();
        
        // Add Header
        if(options.logoUrl) {
           pdf.addImage(options.logoUrl, 'PNG', PADDING, 10, 30, 15);
        } else {
            pdf.setFontSize(10);
            pdf.setTextColor(100);
            pdf.text('[Company Logo]', PADDING, 20);
        }

        pdf.setFontSize(18);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(40);
        pdf.text(options.companyName, pdfWidth - PADDING, 20, { align: 'right' });
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(100);
        pdf.text(options.documentTitle, pdfWidth - PADDING, 26, { align: 'right' });
        
        // Add content image
        pdf.addImage(imgData, 'PNG', PADDING, position, contentWidth, imgHeight);

        addHeaderAndFooter(pageNumber);
      };

      const contentStartY = 40;
      const contentImageHeight = (canvas.height * contentWidth) / canvas.width;
      const pageContentHeight = pdfHeight - contentStartY - (PADDING * 2);

      let heightLeft = contentImageHeight;
      let position = -contentStartY; // Negative position to start drawing from top of image
      let page = 1;

      addPageContent(page, contentStartY);
      heightLeft -= pageContentHeight;
      
      while (heightLeft > 0) {
        page++;
        position -= pageContentHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', PADDING, position, contentWidth, contentImageHeight);
        addHeaderAndFooter(page);
        heightLeft -= pageContentHeight;
      }
      
      pdf.save(`${fileName}.pdf`);
      toast({ title: 'Success', description: 'PDF downloaded successfully.' });

    } catch (err) {
      console.error("PDF generation error:", err);
      toast({ variant: 'destructive', title: 'Error', description: 'Failed to generate PDF.' });
    } finally {
      setIsDownloading(false);
    }
  };

  return { isDownloading, handleDownload };
}
